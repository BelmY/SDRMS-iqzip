# Copyright (C) 2018 Free Software Foundation, Inc.
#
# Permission is granted to copy, distribute and/or modify this document
# under the terms of the GNU Free Documentation License, Version 1.3
# or any later version published by the Free Software Foundation;
# with no Invariant Sections, no Front-Cover Texts, and no Back-Cover Texts.
# A copy of the license is included in the section entitled "GNU
# Free Documentation License".

/*! 

\page build_guide Build Instructions and Information

\section dependencies Dependencies

The list of dependencies and the minimum required versions,
if any, to build iqzip library.

Before trying to build these from source, please try your system's
installation tool (apt-get, pkg_install, YaST, yum, urpmi, etc.)
first. Most recent systems have these packages available.

\subsection dep_global Global Dependencies

\li git                                        http://git-scm.com/downloads
\li cmake           http://www.cmake.org/cmake/resources/software.html
\li G++			(with C++14 support)
\li FlatBuffers  https://google.github.io/flatbuffers/
\li nlohmann_json  https://nlohmann.github.io/json/
\li libsigmf  https://github.com/deepsig/libsigmf


\subsection dep_docs docs: Building the documentation
\li doxygen (>= 1.5) http://www.stack.nl/~dimitri/doxygen/download.html

\section build_gr_cmake Getting and Building 

IQzip is built using the CMake build system
(http://www.cmake.org/). The standard build method is as follows:

\code
$ git clone https://gitlab.com/librespacefoundation/iqzip
$ cd iqzip
$ mkdir $(builddir)
$ cd $(builddir)
$ cmake $(srcdir)
$ make
$ sudo make install
\endcode

By default, the iqzip module will use the default installation prefix.
This highly depends on the Linux distribution. You can use the CMAKE_INSTALL_PREFIX
variable to alter the default installation path.
E.g:

\code 
$ cmake -DCMAKE_INSTALL_PREFIX=/usr .. 
\endcode

Another common control option is the library sugffix of the Linux distribution.
There are distributions like Fedora, openSUSE, e.t.c that the their 64-bit version
use the lib64 folder to store the 64-bit versions of their dynamic libraries.
On the other hand, distributions like Ubuntu do the exact opposite. They use
lib directory for the libraries of the native architecture and place the 32-bit versions
on the lib32 directory. In any case the correct library directory suffix
can be specified with the LIB_SUFFIX variable. For example:

\code 
$cmake -DLIB_SUFFIX=64 -DCMAKE_INSTALL_PREFIX=/usr .. 
\endcode

will install the libraries at the /usr/lib64 directory.

*/