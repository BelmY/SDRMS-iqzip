# Copyright 2011,2012,2014,2016 Free Software Foundation, Inc.
#
# This file was generated by gr_modtool, a tool from the GNU Radio framework
# This file is a part of iqzip
#
# GNU Radio is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3, or (at your option)
# any later version.
#
# GNU Radio is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU Radio; see the file COPYING.  If not, write to
# the Free Software Foundation, Inc., 51 Franklin Street,
# Boston, MA 02110-1301, USA.

########################################################################
# Project setup
########################################################################
cmake_minimum_required(VERSION 3.0 FATAL_ERROR)
project(iqzip CXX C)
enable_testing()

# Enable C++14 support
set (CMAKE_CXX_STANDARD 14)
add_definitions(-std=c++14)
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wextra")

#select the release build type by default to get optimization flags
if(NOT CMAKE_BUILD_TYPE)
#IGNORE    set(CMAKE_BUILD_TYPE "Release")
   message(STATUS "Build type not specified: defaulting to release.")
endif(NOT CMAKE_BUILD_TYPE)
#IGNORE set(CMAKE_BUILD_TYPE ${CMAKE_BUILD_TYPE} CACHE STRING "")

#make sure our local CMake Modules path comes first
list(INSERT CMAKE_MODULE_PATH 0 ${CMAKE_SOURCE_DIR}/cmake)

# Set the version information here
set(VERSION_INFO_MAJOR_VERSION 1)
set(VERSION_INFO_API_COMPAT    0)
set(VERSION_INFO_MINOR_VERSION 0)
set(VERSION_INFO_MAINT_VERSION git)

########################################################################
# Compiler specific setup
########################################################################
if(CMAKE_COMPILER_IS_GNUCXX AND NOT WIN32)
    #http://gcc.gnu.org/wiki/Visibility
    add_definitions(-fvisibility=hidden)
endif()

########################################################################
# Install directories
########################################################################
set(IQZIP_RUNTIME_DIR      bin)
set(IQZIP_LIBRARY_DIR      lib${LIB_SUFFIX})
set(IQZIP_INCLUDE_DIR      include/leo)
set(IQZIP_DATA_DIR         share)
set(IQZIP_PKG_DATA_DIR     ${IQZIP_DATA_DIR}/${CMAKE_PROJECT_NAME})
set(IQZIP_DOC_DIR          ${IQZIP_DATA_DIR}/doc)
set(IQZIP_PKG_DOC_DIR      ${IQZIP_DOC_DIR}/${CMAKE_PROJECT_NAME})
set(IQZIP_CONF_DIR         etc)
set(IQZIP_PKG_CONF_DIR     ${IQZIP_CONF_DIR}/${CMAKE_PROJECT_NAME}/conf.d)
set(IQZIP_LIBEXEC_DIR      libexec)
set(IQZIP_PKG_LIBEXEC_DIR  ${IQZIP_LIBEXEC_DIR}/${CMAKE_PROJECT_NAME})

########################################################################
# Search for the libaec if it is already installed in the system
# If not, install the internal one.
########################################################################
find_package(AEC REQUIRED)
if(NOT AEC_FOUND)
    message(WARNING "libaec is not installed. The internal libaec will be automatically build and install.")
    include(ExternalProject)
	
    ExternalProject_Add(AEC_EXTERNAL
    	PREFIX ${CMAKE_CURRENT_BINARY_DIR}/libaec
        SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libaec
        BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/libaec
        CMAKE_ARGS "-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}"
                   "-DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}"
        INSTALL_COMMAND ${CMAKE_COMMAND} -E echo Skipping installation of libaec
    )
    ExternalProject_Get_Property(AEC_EXTERNAL binary_dir)
    add_library(aec SHARED IMPORTED)

    set_property(TARGET aec PROPERTY IMPORTED_LOCATION ${binary_dir}/src/libaec.so)
    
    add_dependencies(aec AEC_EXTERNAL)
 
    set(AEC_LIBRARIES "${binary_dir}/src/libaec.so")
    set(AEC_INCLUDE_HEADERS "${CMAKE_CURRENT_SOURCE_DIR}/libaec/include/libaec.h"
    					  "${CMAKE_CURRENT_SOURCE_DIR}/libaec/include/szlib.h")
    
	install(FILES ${CMAKE_CURRENT_BINARY_DIR}/libaec/src/libaec.so 
			DESTINATION lib${LIB_SUFFIX})
    		
    install(FILES ${AEC_INCLUDE_HEADERS}
			DESTINATION include/libaec)
    		
else()
    add_library(aec INTERFACE)
endif()

########################################################################
# Setup doxygen option
########################################################################
if(DOXYGEN_FOUND)
	option(ENABLE_DOXYGEN "Build docs using Doxygen" ON)
else(DOXYGEN_FOUND)
	option(ENABLE_DOXYGEN "Build docs using Doxygen" OFF)
endif(DOXYGEN_FOUND)

########################################################################
# Search FlatBuffers
########################################################################
find_package(Flatbuffers NAMES FlatBuffers Flatbuffers REQUIRED)

########################################################################
# Search nlohmann_json
########################################################################
find_package(nlohmann_json NAMES nlohmann_json nlohmann-json REQUIRED)

########################################################################
# Check updates on libsigmf
########################################################################
#TODO: Automatically check libsigmf repo for changes. If exist, rebuild.
find_package(Git QUIET)
include(ExternalProject)	
ExternalProject_Add(LIBSIGMF_EXTERNAL
		PREFIX ${CMAKE_CURRENT_BINARY_DIR}/libsigmf
        SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/libsigmf
        BINARY_DIR ${CMAKE_CURRENT_BINARY_DIR}/libsigmf
        GIT_SUBMODULES
#        GIT_REPOSITORY "https://github.com/deepsig/libsigmf.git"
        CMAKE_ARGS "-DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}"
                   "-DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}"
        INSTALL_COMMAND ${CMAKE_COMMAND} -E echo Skipping installation of libsigmf
)
    
#ExternalProject_Get_Property(SGP4_EXTERNAL binary_dir)
    
#if(GIT_FOUND AND EXISTS "${PROJECT_SOURCE_DIR}/.git")
## Update submodules as needed
#    option(GIT_SUBMODULE "Check submodules during build" ON)
#    if(GIT_SUBMODULE)
#        message(STATUS "Submodule update")
#        execute_process(COMMAND ${GIT_EXECUTABLE} submodule update --init --recursive
#                        WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}
#                        RESULT_VARIABLE GIT_SUBMOD_RESULT)
#        if(NOT GIT_SUBMOD_RESULT EQUAL "0")
#            message(FATAL_ERROR "git submodule update --init failed with ${GIT_SUBMOD_RESULT}, please checkout submodules")
#        endif()
#    endif()
#endif()
#
#if(NOT EXISTS "${PROJECT_SOURCE_DIR}/libsigmf/CMakeLists.txt")
#    message(FATAL_ERROR "The submodules were not downloaded! GIT_SUBMODULE was turned off or failed. Please update submodules and try again.")
#endif()

########################################################################
# Setup the include and linker paths
########################################################################
include_directories(
	${CMAKE_SOURCE_DIR}
    ${CMAKE_SOURCE_DIR}/lib
    ${CMAKE_SOURCE_DIR}/include
    ${CMAKE_BINARY_DIR}/lib
    ${CMAKE_BINARY_DIR}/include
    ${CMAKE_SOURCE_DIR}/libaec/include
    ${CMAKE_SOURCE_DIR}/libsigmf/src/sigmf
    ${CMAKE_SOURCE_DIR}/include/src/sigmf_protocols
)

# Set component parameters
set(IQZIP_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/include CACHE INTERNAL "" FORCE)
set(IQZIP_SWIG_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/swig CACHE INTERNAL "" FORCE)

########################################################################
# Create uninstall target
########################################################################
configure_file(
    ${CMAKE_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in
    ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake
@ONLY)

add_custom_target(uninstall
    ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake
)

########################################################################
# Data direcotry path definition
########################################################################
add_definitions(-DDATA_PATH=\"${CMAKE_INSTALL_PREFIX}/${IQZIP_PKG_DATA_DIR}\")
message( \"${CMAKE_INSTALL_PREFIX}/${IQZIP_PKG_DATA_DIR}\" )

########################################################################
# Add subdirectories
########################################################################
add_subdirectory(include/iqzip)
add_subdirectory(lib)
add_subdirectory(scripts)
#add_subdirectory(apps)
add_subdirectory(docs)
add_subdirectory(data)

########################################################################
# Install cmake search helper for this library
########################################################################
if(NOT CMAKE_MODULES_DIR)
  set(CMAKE_MODULES_DIR lib${LIB_SUFFIX}/cmake)
endif(NOT CMAKE_MODULES_DIR)

#install(FILES cmake/iqzipConfig.cmake
#    DESTINATION ${CMAKE_MODULES_DIR}/iqzip
#)
