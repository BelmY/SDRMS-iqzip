// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SIGMFANTENNA_ANTENNA_H_
#define FLATBUFFERS_GENERATED_SIGMFANTENNA_ANTENNA_H_

#include "flatbuffers/flatbuffers.h"

namespace antenna {

struct Global;
struct GlobalT;

struct Capture;
struct CaptureT;

struct Annotation;
struct AnnotationT;

struct Descr;
struct DescrT;

inline const flatbuffers::TypeTable *GlobalTypeTable();

inline const flatbuffers::TypeTable *CaptureTypeTable();

inline const flatbuffers::TypeTable *AnnotationTypeTable();

inline const flatbuffers::TypeTable *DescrTypeTable();

struct GlobalT : public flatbuffers::NativeTable {
  typedef Global TableType;
  std::string model;
  std::string type;
  float low_frequency;
  float high_frequency;
  float gain;
  float horizontal_beam_width;
  float vertical_beam_width;
  float cross_polar_discrimination;
  float voltage_standing_wave_ratio;
  float cable_loss;
  bool steerable;
  bool mobile;
  std::string version;
  GlobalT()
      : low_frequency(0.0f),
        high_frequency(0.0f),
        gain(0.0f),
        horizontal_beam_width(0.0f),
        vertical_beam_width(0.0f),
        cross_polar_discrimination(0.0f),
        voltage_standing_wave_ratio(0.0f),
        cable_loss(0.0f),
        steerable(false),
        mobile(false) {
  }
};

struct Global FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GlobalT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return GlobalTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_MODEL = 4,
    VT_TYPE = 6,
    VT_LOW_FREQUENCY = 8,
    VT_HIGH_FREQUENCY = 10,
    VT_GAIN = 12,
    VT_HORIZONTAL_BEAM_WIDTH = 14,
    VT_VERTICAL_BEAM_WIDTH = 16,
    VT_CROSS_POLAR_DISCRIMINATION = 18,
    VT_VOLTAGE_STANDING_WAVE_RATIO = 20,
    VT_CABLE_LOSS = 22,
    VT_STEERABLE = 24,
    VT_MOBILE = 26,
    VT_VERSION = 28
  };
  const flatbuffers::String *model() const {
    return GetPointer<const flatbuffers::String *>(VT_MODEL);
  }
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  float low_frequency() const {
    return GetField<float>(VT_LOW_FREQUENCY, 0.0f);
  }
  float high_frequency() const {
    return GetField<float>(VT_HIGH_FREQUENCY, 0.0f);
  }
  float gain() const {
    return GetField<float>(VT_GAIN, 0.0f);
  }
  float horizontal_beam_width() const {
    return GetField<float>(VT_HORIZONTAL_BEAM_WIDTH, 0.0f);
  }
  float vertical_beam_width() const {
    return GetField<float>(VT_VERTICAL_BEAM_WIDTH, 0.0f);
  }
  float cross_polar_discrimination() const {
    return GetField<float>(VT_CROSS_POLAR_DISCRIMINATION, 0.0f);
  }
  float voltage_standing_wave_ratio() const {
    return GetField<float>(VT_VOLTAGE_STANDING_WAVE_RATIO, 0.0f);
  }
  float cable_loss() const {
    return GetField<float>(VT_CABLE_LOSS, 0.0f);
  }
  bool steerable() const {
    return GetField<uint8_t>(VT_STEERABLE, 0) != 0;
  }
  bool mobile() const {
    return GetField<uint8_t>(VT_MOBILE, 0) != 0;
  }
  const flatbuffers::String *version() const {
    return GetPointer<const flatbuffers::String *>(VT_VERSION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MODEL) &&
           verifier.VerifyString(model()) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyField<float>(verifier, VT_LOW_FREQUENCY) &&
           VerifyField<float>(verifier, VT_HIGH_FREQUENCY) &&
           VerifyField<float>(verifier, VT_GAIN) &&
           VerifyField<float>(verifier, VT_HORIZONTAL_BEAM_WIDTH) &&
           VerifyField<float>(verifier, VT_VERTICAL_BEAM_WIDTH) &&
           VerifyField<float>(verifier, VT_CROSS_POLAR_DISCRIMINATION) &&
           VerifyField<float>(verifier, VT_VOLTAGE_STANDING_WAVE_RATIO) &&
           VerifyField<float>(verifier, VT_CABLE_LOSS) &&
           VerifyField<uint8_t>(verifier, VT_STEERABLE) &&
           VerifyField<uint8_t>(verifier, VT_MOBILE) &&
           VerifyOffset(verifier, VT_VERSION) &&
           verifier.VerifyString(version()) &&
           verifier.EndTable();
  }
  GlobalT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(GlobalT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Global> Pack(flatbuffers::FlatBufferBuilder &_fbb, const GlobalT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct GlobalBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_model(flatbuffers::Offset<flatbuffers::String> model) {
    fbb_.AddOffset(Global::VT_MODEL, model);
  }
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(Global::VT_TYPE, type);
  }
  void add_low_frequency(float low_frequency) {
    fbb_.AddElement<float>(Global::VT_LOW_FREQUENCY, low_frequency, 0.0f);
  }
  void add_high_frequency(float high_frequency) {
    fbb_.AddElement<float>(Global::VT_HIGH_FREQUENCY, high_frequency, 0.0f);
  }
  void add_gain(float gain) {
    fbb_.AddElement<float>(Global::VT_GAIN, gain, 0.0f);
  }
  void add_horizontal_beam_width(float horizontal_beam_width) {
    fbb_.AddElement<float>(Global::VT_HORIZONTAL_BEAM_WIDTH, horizontal_beam_width, 0.0f);
  }
  void add_vertical_beam_width(float vertical_beam_width) {
    fbb_.AddElement<float>(Global::VT_VERTICAL_BEAM_WIDTH, vertical_beam_width, 0.0f);
  }
  void add_cross_polar_discrimination(float cross_polar_discrimination) {
    fbb_.AddElement<float>(Global::VT_CROSS_POLAR_DISCRIMINATION, cross_polar_discrimination, 0.0f);
  }
  void add_voltage_standing_wave_ratio(float voltage_standing_wave_ratio) {
    fbb_.AddElement<float>(Global::VT_VOLTAGE_STANDING_WAVE_RATIO, voltage_standing_wave_ratio, 0.0f);
  }
  void add_cable_loss(float cable_loss) {
    fbb_.AddElement<float>(Global::VT_CABLE_LOSS, cable_loss, 0.0f);
  }
  void add_steerable(bool steerable) {
    fbb_.AddElement<uint8_t>(Global::VT_STEERABLE, static_cast<uint8_t>(steerable), 0);
  }
  void add_mobile(bool mobile) {
    fbb_.AddElement<uint8_t>(Global::VT_MOBILE, static_cast<uint8_t>(mobile), 0);
  }
  void add_version(flatbuffers::Offset<flatbuffers::String> version) {
    fbb_.AddOffset(Global::VT_VERSION, version);
  }
  explicit GlobalBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  GlobalBuilder &operator=(const GlobalBuilder &);
  flatbuffers::Offset<Global> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Global>(end);
    return o;
  }
};

inline flatbuffers::Offset<Global> CreateGlobal(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> model = 0,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    float low_frequency = 0.0f,
    float high_frequency = 0.0f,
    float gain = 0.0f,
    float horizontal_beam_width = 0.0f,
    float vertical_beam_width = 0.0f,
    float cross_polar_discrimination = 0.0f,
    float voltage_standing_wave_ratio = 0.0f,
    float cable_loss = 0.0f,
    bool steerable = false,
    bool mobile = false,
    flatbuffers::Offset<flatbuffers::String> version = 0) {
  GlobalBuilder builder_(_fbb);
  builder_.add_version(version);
  builder_.add_cable_loss(cable_loss);
  builder_.add_voltage_standing_wave_ratio(voltage_standing_wave_ratio);
  builder_.add_cross_polar_discrimination(cross_polar_discrimination);
  builder_.add_vertical_beam_width(vertical_beam_width);
  builder_.add_horizontal_beam_width(horizontal_beam_width);
  builder_.add_gain(gain);
  builder_.add_high_frequency(high_frequency);
  builder_.add_low_frequency(low_frequency);
  builder_.add_type(type);
  builder_.add_model(model);
  builder_.add_mobile(mobile);
  builder_.add_steerable(steerable);
  return builder_.Finish();
}

inline flatbuffers::Offset<Global> CreateGlobalDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *model = nullptr,
    const char *type = nullptr,
    float low_frequency = 0.0f,
    float high_frequency = 0.0f,
    float gain = 0.0f,
    float horizontal_beam_width = 0.0f,
    float vertical_beam_width = 0.0f,
    float cross_polar_discrimination = 0.0f,
    float voltage_standing_wave_ratio = 0.0f,
    float cable_loss = 0.0f,
    bool steerable = false,
    bool mobile = false,
    const char *version = nullptr) {
  auto model__ = model ? _fbb.CreateString(model) : 0;
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto version__ = version ? _fbb.CreateString(version) : 0;
  return antenna::CreateGlobal(
      _fbb,
      model__,
      type__,
      low_frequency,
      high_frequency,
      gain,
      horizontal_beam_width,
      vertical_beam_width,
      cross_polar_discrimination,
      voltage_standing_wave_ratio,
      cable_loss,
      steerable,
      mobile,
      version__);
}

flatbuffers::Offset<Global> CreateGlobal(flatbuffers::FlatBufferBuilder &_fbb, const GlobalT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct CaptureT : public flatbuffers::NativeTable {
  typedef Capture TableType;
  CaptureT() {
  }
};

struct Capture FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CaptureT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return CaptureTypeTable();
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           verifier.EndTable();
  }
  CaptureT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(CaptureT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Capture> Pack(flatbuffers::FlatBufferBuilder &_fbb, const CaptureT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct CaptureBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  explicit CaptureBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  CaptureBuilder &operator=(const CaptureBuilder &);
  flatbuffers::Offset<Capture> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Capture>(end);
    return o;
  }
};

inline flatbuffers::Offset<Capture> CreateCapture(
    flatbuffers::FlatBufferBuilder &_fbb) {
  CaptureBuilder builder_(_fbb);
  return builder_.Finish();
}

flatbuffers::Offset<Capture> CreateCapture(flatbuffers::FlatBufferBuilder &_fbb, const CaptureT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct AnnotationT : public flatbuffers::NativeTable {
  typedef Annotation TableType;
  double azimuth_angle;
  double elevation_angle;
  std::string polarization;
  AnnotationT()
      : azimuth_angle(0.0),
        elevation_angle(0.0) {
  }
};

struct Annotation FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef AnnotationT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return AnnotationTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AZIMUTH_ANGLE = 4,
    VT_ELEVATION_ANGLE = 6,
    VT_POLARIZATION = 8
  };
  double azimuth_angle() const {
    return GetField<double>(VT_AZIMUTH_ANGLE, 0.0);
  }
  double elevation_angle() const {
    return GetField<double>(VT_ELEVATION_ANGLE, 0.0);
  }
  const flatbuffers::String *polarization() const {
    return GetPointer<const flatbuffers::String *>(VT_POLARIZATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<double>(verifier, VT_AZIMUTH_ANGLE) &&
           VerifyField<double>(verifier, VT_ELEVATION_ANGLE) &&
           VerifyOffset(verifier, VT_POLARIZATION) &&
           verifier.VerifyString(polarization()) &&
           verifier.EndTable();
  }
  AnnotationT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(AnnotationT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Annotation> Pack(flatbuffers::FlatBufferBuilder &_fbb, const AnnotationT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct AnnotationBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_azimuth_angle(double azimuth_angle) {
    fbb_.AddElement<double>(Annotation::VT_AZIMUTH_ANGLE, azimuth_angle, 0.0);
  }
  void add_elevation_angle(double elevation_angle) {
    fbb_.AddElement<double>(Annotation::VT_ELEVATION_ANGLE, elevation_angle, 0.0);
  }
  void add_polarization(flatbuffers::Offset<flatbuffers::String> polarization) {
    fbb_.AddOffset(Annotation::VT_POLARIZATION, polarization);
  }
  explicit AnnotationBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  AnnotationBuilder &operator=(const AnnotationBuilder &);
  flatbuffers::Offset<Annotation> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Annotation>(end);
    return o;
  }
};

inline flatbuffers::Offset<Annotation> CreateAnnotation(
    flatbuffers::FlatBufferBuilder &_fbb,
    double azimuth_angle = 0.0,
    double elevation_angle = 0.0,
    flatbuffers::Offset<flatbuffers::String> polarization = 0) {
  AnnotationBuilder builder_(_fbb);
  builder_.add_elevation_angle(elevation_angle);
  builder_.add_azimuth_angle(azimuth_angle);
  builder_.add_polarization(polarization);
  return builder_.Finish();
}

inline flatbuffers::Offset<Annotation> CreateAnnotationDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    double azimuth_angle = 0.0,
    double elevation_angle = 0.0,
    const char *polarization = nullptr) {
  auto polarization__ = polarization ? _fbb.CreateString(polarization) : 0;
  return antenna::CreateAnnotation(
      _fbb,
      azimuth_angle,
      elevation_angle,
      polarization__);
}

flatbuffers::Offset<Annotation> CreateAnnotation(flatbuffers::FlatBufferBuilder &_fbb, const AnnotationT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct DescrT : public flatbuffers::NativeTable {
  typedef Descr TableType;
  std::unique_ptr<GlobalT> global;
  std::unique_ptr<AnnotationT> annotation;
  std::unique_ptr<CaptureT> capture;
  DescrT() {
  }
};

struct Descr FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DescrT NativeTableType;
  static const flatbuffers::TypeTable *MiniReflectTypeTable() {
    return DescrTypeTable();
  }
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_GLOBAL = 4,
    VT_ANNOTATION = 6,
    VT_CAPTURE = 8
  };
  const Global *global() const {
    return GetPointer<const Global *>(VT_GLOBAL);
  }
  const Annotation *annotation() const {
    return GetPointer<const Annotation *>(VT_ANNOTATION);
  }
  const Capture *capture() const {
    return GetPointer<const Capture *>(VT_CAPTURE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_GLOBAL) &&
           verifier.VerifyTable(global()) &&
           VerifyOffset(verifier, VT_ANNOTATION) &&
           verifier.VerifyTable(annotation()) &&
           VerifyOffset(verifier, VT_CAPTURE) &&
           verifier.VerifyTable(capture()) &&
           verifier.EndTable();
  }
  DescrT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(DescrT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Descr> Pack(flatbuffers::FlatBufferBuilder &_fbb, const DescrT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct DescrBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_global(flatbuffers::Offset<Global> global) {
    fbb_.AddOffset(Descr::VT_GLOBAL, global);
  }
  void add_annotation(flatbuffers::Offset<Annotation> annotation) {
    fbb_.AddOffset(Descr::VT_ANNOTATION, annotation);
  }
  void add_capture(flatbuffers::Offset<Capture> capture) {
    fbb_.AddOffset(Descr::VT_CAPTURE, capture);
  }
  explicit DescrBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  DescrBuilder &operator=(const DescrBuilder &);
  flatbuffers::Offset<Descr> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Descr>(end);
    return o;
  }
};

inline flatbuffers::Offset<Descr> CreateDescr(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Global> global = 0,
    flatbuffers::Offset<Annotation> annotation = 0,
    flatbuffers::Offset<Capture> capture = 0) {
  DescrBuilder builder_(_fbb);
  builder_.add_capture(capture);
  builder_.add_annotation(annotation);
  builder_.add_global(global);
  return builder_.Finish();
}

flatbuffers::Offset<Descr> CreateDescr(flatbuffers::FlatBufferBuilder &_fbb, const DescrT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline GlobalT *Global::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new GlobalT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Global::UnPackTo(GlobalT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = model(); if (_e) _o->model = _e->str(); };
  { auto _e = type(); if (_e) _o->type = _e->str(); };
  { auto _e = low_frequency(); _o->low_frequency = _e; };
  { auto _e = high_frequency(); _o->high_frequency = _e; };
  { auto _e = gain(); _o->gain = _e; };
  { auto _e = horizontal_beam_width(); _o->horizontal_beam_width = _e; };
  { auto _e = vertical_beam_width(); _o->vertical_beam_width = _e; };
  { auto _e = cross_polar_discrimination(); _o->cross_polar_discrimination = _e; };
  { auto _e = voltage_standing_wave_ratio(); _o->voltage_standing_wave_ratio = _e; };
  { auto _e = cable_loss(); _o->cable_loss = _e; };
  { auto _e = steerable(); _o->steerable = _e; };
  { auto _e = mobile(); _o->mobile = _e; };
  { auto _e = version(); if (_e) _o->version = _e->str(); };
}

inline flatbuffers::Offset<Global> Global::Pack(flatbuffers::FlatBufferBuilder &_fbb, const GlobalT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateGlobal(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Global> CreateGlobal(flatbuffers::FlatBufferBuilder &_fbb, const GlobalT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const GlobalT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _model = _o->model.empty() ? 0 : _fbb.CreateString(_o->model);
  auto _type = _o->type.empty() ? 0 : _fbb.CreateString(_o->type);
  auto _low_frequency = _o->low_frequency;
  auto _high_frequency = _o->high_frequency;
  auto _gain = _o->gain;
  auto _horizontal_beam_width = _o->horizontal_beam_width;
  auto _vertical_beam_width = _o->vertical_beam_width;
  auto _cross_polar_discrimination = _o->cross_polar_discrimination;
  auto _voltage_standing_wave_ratio = _o->voltage_standing_wave_ratio;
  auto _cable_loss = _o->cable_loss;
  auto _steerable = _o->steerable;
  auto _mobile = _o->mobile;
  auto _version = _o->version.empty() ? 0 : _fbb.CreateString(_o->version);
  return antenna::CreateGlobal(
      _fbb,
      _model,
      _type,
      _low_frequency,
      _high_frequency,
      _gain,
      _horizontal_beam_width,
      _vertical_beam_width,
      _cross_polar_discrimination,
      _voltage_standing_wave_ratio,
      _cable_loss,
      _steerable,
      _mobile,
      _version);
}

inline CaptureT *Capture::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new CaptureT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Capture::UnPackTo(CaptureT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
}

inline flatbuffers::Offset<Capture> Capture::Pack(flatbuffers::FlatBufferBuilder &_fbb, const CaptureT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateCapture(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Capture> CreateCapture(flatbuffers::FlatBufferBuilder &_fbb, const CaptureT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const CaptureT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  return antenna::CreateCapture(
      _fbb);
}

inline AnnotationT *Annotation::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new AnnotationT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Annotation::UnPackTo(AnnotationT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = azimuth_angle(); _o->azimuth_angle = _e; };
  { auto _e = elevation_angle(); _o->elevation_angle = _e; };
  { auto _e = polarization(); if (_e) _o->polarization = _e->str(); };
}

inline flatbuffers::Offset<Annotation> Annotation::Pack(flatbuffers::FlatBufferBuilder &_fbb, const AnnotationT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateAnnotation(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Annotation> CreateAnnotation(flatbuffers::FlatBufferBuilder &_fbb, const AnnotationT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const AnnotationT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _azimuth_angle = _o->azimuth_angle;
  auto _elevation_angle = _o->elevation_angle;
  auto _polarization = _o->polarization.empty() ? 0 : _fbb.CreateString(_o->polarization);
  return antenna::CreateAnnotation(
      _fbb,
      _azimuth_angle,
      _elevation_angle,
      _polarization);
}

inline DescrT *Descr::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new DescrT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void Descr::UnPackTo(DescrT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = global(); if (_e) _o->global = std::unique_ptr<GlobalT>(_e->UnPack(_resolver)); };
  { auto _e = annotation(); if (_e) _o->annotation = std::unique_ptr<AnnotationT>(_e->UnPack(_resolver)); };
  { auto _e = capture(); if (_e) _o->capture = std::unique_ptr<CaptureT>(_e->UnPack(_resolver)); };
}

inline flatbuffers::Offset<Descr> Descr::Pack(flatbuffers::FlatBufferBuilder &_fbb, const DescrT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateDescr(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Descr> CreateDescr(flatbuffers::FlatBufferBuilder &_fbb, const DescrT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const DescrT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _global = _o->global ? CreateGlobal(_fbb, _o->global.get(), _rehasher) : 0;
  auto _annotation = _o->annotation ? CreateAnnotation(_fbb, _o->annotation.get(), _rehasher) : 0;
  auto _capture = _o->capture ? CreateCapture(_fbb, _o->capture.get(), _rehasher) : 0;
  return antenna::CreateDescr(
      _fbb,
      _global,
      _annotation,
      _capture);
}

inline const flatbuffers::TypeTable *GlobalTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_FLOAT, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_BOOL, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "model",
    "type",
    "low_frequency",
    "high_frequency",
    "gain",
    "horizontal_beam_width",
    "vertical_beam_width",
    "cross_polar_discrimination",
    "voltage_standing_wave_ratio",
    "cable_loss",
    "steerable",
    "mobile",
    "version"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 13, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *CaptureTypeTable() {
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 0, nullptr, nullptr, nullptr, nullptr
  };
  return &tt;
}

inline const flatbuffers::TypeTable *AnnotationTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_DOUBLE, 0, -1 },
    { flatbuffers::ET_STRING, 0, -1 }
  };
  static const char * const names[] = {
    "azimuth_angle",
    "elevation_angle",
    "polarization"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, nullptr, nullptr, names
  };
  return &tt;
}

inline const flatbuffers::TypeTable *DescrTypeTable() {
  static const flatbuffers::TypeCode type_codes[] = {
    { flatbuffers::ET_SEQUENCE, 0, 0 },
    { flatbuffers::ET_SEQUENCE, 0, 1 },
    { flatbuffers::ET_SEQUENCE, 0, 2 }
  };
  static const flatbuffers::TypeFunction type_refs[] = {
    GlobalTypeTable,
    AnnotationTypeTable,
    CaptureTypeTable
  };
  static const char * const names[] = {
    "global",
    "annotation",
    "capture"
  };
  static const flatbuffers::TypeTable tt = {
    flatbuffers::ST_TABLE, 3, type_codes, type_refs, nullptr, names
  };
  return &tt;
}

}  // namespace antenna

#endif  // FLATBUFFERS_GENERATED_SIGMFANTENNA_ANTENNA_H_
